#include <iostream>
#include <conio.h>
#include "time.h"
#include "windows.h"
#include "CrtLib.h"

using namespace std;
using namespace crt;



const int LX = 75;
const int LY = 30;

const char player = (char)1;


// 0 - пустое пространство
// 1 - стена 
// 2 - выход
// 3 - игрок
// 4 - монета

int maze[LY][LX] = {
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 4, 1, 4, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1},
 {1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1},
 {1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1},
 {1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1},
 {1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1},
 {1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 4, 0, 4, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1},
 {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1},
 {1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1},
 {1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
 {1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1},
 {1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1},
 {1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 4, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1},
 {1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1},
 {1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1},
 {1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1},
 {1, 0, 1, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 4, 1, 0, 1, 1},
 {1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 4, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 4, 0, 0, 0, 0, 0, 4, 0, 2},
 {1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 4, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 0, 0 ,0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1},
 {1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1},
 {1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1},
 {1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1},
 {1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 0, 1, 1, 1, 1},
 {1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1},
 {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1},
 {1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1},
 {1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
 {1, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 1, 1, 1, 1, 1, 1, 1},
 {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
};


// глобальные переменные

int hx, hy; // позиция игрока в лабиринте
int score = 0; // счет игры
int gameState = 0; // 0 - игра продолжается, 1 - выигрыш, 2 - закончилось время
int timeLimit = 240; // лимит игры в секундах
int gameTime; // оставшееся время

clock_t tstart; // значение счетчика таймера при старте игры

// Функция обновляет текущий счет на экране
void UpdateScore(int score)
{
    GotoXY(35, 30); // ставим курсор на последнюю строку консоли
    setlocale(LC_ALL, "ru-RU"); // включаем локаль, ориентированную на кириллицу
    SetTextColor(1);
    cout << "СЧЕТ: " << score;  // выводим счет на экран
    setlocale(LC_ALL, "C"); // возвращаем настройки локали по умолчанию
}

// Функция обновляет оставшееся время до окончания игры
// параметр t функции - это текущее значение системного таймера, на момент вызова функции
void UpdateClock(clock_t t)
{
    gameTime = timeLimit - (t - tstart) / CLOCKS_PER_SEC; /* вычисляем оставшееся время в секундах
                    и помещаем результат в gameTime. (t-tstart) - кол-во миллисекунд, прошедшее
                    с момента старта игры. CLOCKS_PER_SEC - константа, определяющая количество
                    изменений системного таймера за 1 секунду. Для Windows это значение 
                    равно 1000. Вычитая из timeLimit время, прошедшее с начала игры, мы вычисляем
                    остаток времени в секундах */
    if (gameTime > 15) //если осталось больше 15 секунд, оставшееся время отображается зеленым
    {
        SetTextColor(2);
    }
    else // в противном случае время окрашено в красный
    {
        SetTextColor(4);
    }
    setlocale(LC_ALL, "ru-RU"); // переключаем локаль
    if (gameTime < 0) // проверяем, закончилось ли время
    {
        gameState = 2; // если да, то обновляем статус игры на 2 - игрок ПРОИГРАЛ
    }
    else
    {  // если время осталось
        GotoXY(49, 30); // ставим курсор на последнюю строку
        cout << "Осталось: " << gameTime << " секунд "; // выводим остаток времени в консоль
    }
    setlocale(LC_ALL, "C"); // восстанавливаем настройки локали
}

// Функция печатает в консоли лабиринт
void PrintMaze(int maze[LY][LX], int sizeX, int sizeY)

{
    for (int i = 0; i < sizeY; i++)
    {
        for (int j = 0; j < sizeX; j++)
        {
            switch (maze[i][j])
            {
            case 0:
                cout << ' ';
                break;
            case 1:                
                SetTextColor(COLOR_RED);
                cout << (char)178;
                break;
            case 2:
                SetTextColor(COLOR_GRAY);
                cout << (char)176;
                break;
            case 3:
                
                SetTextColor(COLOR_WHITE);
                cout << player;
                break;
            case 4:
                SetTextColor(COLOR_YELLOW);
                cout << '$';
                break;
            default:
                cout << '?'; 
            }
        }
        cout << endl;
    }
}

// Функция определяет валидацию лабиринта
bool FindFirstPlayerPosition(int maze[LY][LX], int sizeX, int sizeY)
{
    int player = 0;
    int exit = 0;
    for (int i = 0; i < sizeY; i++)  // цикл пробегает массив по строкам
    {
        for (int j = 0; j < sizeX; j++) // цикл пробегает массив по столбцам
        {
            if (maze[i][j] == 3)    // проверяем, есть ли в массиве элемент 3 (игрок)
            {                       
                player++;
                hy = i;
                hx = j;
            }
            if (maze[i][j] == 2) //проверяем есть ли в массиве элемент 2 (выход) 
            {
                exit++;
            }
        }
    }
    if (player == 1 && exit >= 1) // если есть один игрок и хотя бы один выход то можно начинать игру

        return true;
    else
        //setlocale(LC_ALL, "ru-RU");
    // cout << "Лабиринт не валиден, игра завершена" << endl; //если лабиринт не валиден вывести на экран сообщение 
        return false;
}                   

//Функция скрывает игрока с экрана и убирает его из лабиринта
void HidePlayer()
{
    maze[hy][hx] = 0; // записываем в текущую позицию матрицы число 0
    GotoXY(hx, hy); // устанавливаем курсор в позицию игрока в консоль
    cout << ' ';    // и печатаем пробел
}

// функция показывает на экране игрока и записывает его в лабиринт
void ShowPlayer()
{
    maze[hy][hx] = 3; // записываем в текущую позицию матрицы число 0
    GotoXY(hx, hy); // устанавливаем курсор в позицию игрока в консоль
    SetTextColor(COLOR_WHITE);
    cout << player; // и печатаем образ игрока
}

// Функция перемещает игрока вверх на одну клетку, если это разрешено
void MovePlayer(int dx, int dy, int hx, int hy)
{
    if (hx + dx < LX && hy + dy < LY && hx + dx >= 0 && hy + dy >= 0) // проверяем, если текущая позиция игрока > 0 - то перемещаться можно
    {
        switch (maze[hy + dy][hx + dx]) // проверяем, что находится в ячейке матрицы на строку выше и на столбец справа
        {
        case 0:                  // если там пусто, то ход возможен.
            HidePlayer();       // вызываем функцию, которая скрывает игрока с экрана и убирает из текущей позиции матрицы
            hy += dy;           // складываем и присваеваем результат
            hx += dx;           
            ShowPlayer();       // отображаем игрока в новой позиции
            break;
        case 2:                 // если там дверь выхода
            HidePlayer();       // по аналогии с вышестоящим кодом перемещаем игрока в новую позицию
            hy += dy;
            hx += dx;
            ShowPlayer();
            UpdateScore(score += 500);  // добавляем 500 бонусов за достижение выхода из лабиринта
            gameState = 1;              // изменяем статус игры на ВЫИГРЫШ
            break;
        case 4:                 // если там монета
            HidePlayer();       // по аналогии с вышестоящим кодом перемещаем игрока в новую позицию
            hy += dy;
            hx += dx;
            ShowPlayer();
            UpdateScore(score += 100); // добавляем 100 бонусов за сбор монеты
            break;
        }
    }

}

// Функция перемещает игрока вниз на одну клетку, если это разрешено
/*void GoDown()
{
    if (hy < LY - 1)
    {
        switch (maze[hy + 1][hx])
        {
        case 0:
            HidePlayer();
            hy++;
            ShowPlayer();
            break;
        case 2:
            HidePlayer();
            hy++;
            ShowPlayer();
            UpdateScore(score += 500);
            gameState = 1;
            break;
        case 4:
            HidePlayer();
            hy++;
            ShowPlayer();
            UpdateScore(score += 100);
            break;
        }
    }
}

// Функция перемещает игрока вправо на одну клетку, если это разрешено
void GoRight()
{
    if (hx < LX - 1)
    {
        switch (maze[hy][hx + 1])
        {
        case 0:
            HidePlayer();
            hx++;
            ShowPlayer();
            break;
        case 2:
            HidePlayer();
            hx++;
            ShowPlayer();
            UpdateScore(score += 500);
            gameState = 1;
            break;
        case 4:
            HidePlayer();
            hx++;
            ShowPlayer();
            UpdateScore(score += 100);
            break;
        }
    }
}

//// Функция перемещает игрока влево на одну клетку, если это разрешено
void GoLeft()
{
    if (hx > 0)
    {
        switch (maze[hy][hx - 1])
        {
        case 0:
            HidePlayer();
            hx--;
            ShowPlayer();
            break;
        case 2:
            HidePlayer();
            hx--;
            ShowPlayer();
            UpdateScore(score += 500);
            gameState = 1;
            break;
        case 4:
            HidePlayer();
            hx--;
            ShowPlayer();
            UpdateScore(score += 100);
            break;
        }
    }
}
*/
// Функция обрабатывает события клавиатуры и управляет игрой
void Control(int& gameState)
{
    clock_t tstart = clock();  // запоминаем счетчик системного таймера в момент старта игры.
    UpdateScore(score); // обновляем счет игры, изначально он нулевой
    unsigned char x;  // это переменная хранит символ, соответствующий нажатой клавише
    while (gameState == 0)  // цикл игры - пока gameState == 0, игра идет
    {
        UpdateClock(clock() );   // обновляем оставшееся время
        if (_kbhit())           // если была нажата клавиша - то обрабатываем ее, иначе следующая
        {                       // итерация игрового цикла
            x = _getch();       // считываем символ нажатой клавиш,
            if (x == 27) return;// если это символ Esc (27) то это выход из игры
            if (x == 0xe0)      // если это символ с кодом 0xE0 (шестнадцатеричное)
                switch (_getch()) // то считываем еще один символ (некоторые клавиши выдают двойные коды)
                {
                case 72:          // если 2-й символ код 72, то это клавиша курсор вверх
                   MovePlayer(0, -1, hx, hy);       // идем вверх
                    break;
                case 80:         // если 2-й символ код 80, то это клавиша курсор вниз
                    MovePlayer(0, 1, hx, hy);    // идем вниз
                    break;
                case 75:        // если 2-й символ код 75, то это клавиша курсор влево
                    MovePlayer(-1, 0, hx, hy); ;   // идем влево
                    break;
                case 77:
                    MovePlayer(1, 0, hx, hy);   // если 2 - й символ код 77, то это клавиша курсор вправо
                    break;      // идем вправо
                }
        }
        Sleep(200);             // останавливаем игру на 200 мсек, если этого не делать, то
    }                           // обновление игры будет слишком быстрым, мы не сможем управлять
}                               // игроком, а также напрасно нагрузим процессор ненужной работой

// Функция main, которая выполняется при запуске прграммы
int main()
{
    system("mode con cols=80 lines=31");
    system("cls");
    PrintMaze(maze, LX, LY);
    if (!FindFirstPlayerPosition(maze, LX, LY))
    
     {
       gameState = 2;
       setlocale(LC_ALL, "ru-RU");
       cout << "Лабиринт не валиден, игра завершена";
    }
    
    
    HideCursor();
    Control(gameState);

    ShowCursor();
}

//, tstart, gameState, gameTime
